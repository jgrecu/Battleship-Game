type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Location.java
  visible: true
  text: |
    package battleship;

    public class Location {
        final private int row;
        final private int column;

        public Location(int row, int column) {
            this.row = row;
            this.column = column;
        }

        @Override
        public String toString() {
            return "Location{" +
                    "row=" + row +
                    ", column=" + column +
                    '}';
        }
    }
  learner_created: true
- name: src/battleship/Cell.java
  visible: true
  text: |
    package battleship;

    public class Cell {
        final private Location location;
        private Ship ship;
        private boolean hitOrMiss = false;

        public Cell(Location location) {
            this.location = location;
            this.ship = null;
        }

        public Ship getShip() {
            return ship;
        }

        public void setShip(Ship ship) {
            this.ship = ship;
        }

        public boolean isHitOrMiss() {
            return hitOrMiss;
        }

        public void setHitOrMiss(boolean hitOrMiss) {
            this.hitOrMiss = hitOrMiss;
        }

        public Location getLocation() {
            return location;
        }
    }
  learner_created: true
- name: src/battleship/ShipType.java
  visible: true
  text: |-
    package battleship;

    public enum ShipType {
        CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        final private String name;
        final private int size;

        ShipType(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/GameField.java
  visible: true
  text: |
    package battleship;

    public class GameField {
        //final private String[][] battleBoard;
        final private Cell[][] field = new Cell[10][10];
        final private String LETTERS = "ABCDEFGHIJ";
        final private int FIELDSIZE = 10;
        private int numberOfShips = 0;

        public GameField() {
            for (int i = 0; i < FIELDSIZE; i++) {
                for (int j = 0; j < FIELDSIZE; j++) {
                    field[i][j] = new Cell(new Location(i, j));
                }
            }
    //        this.battleBoard = new String[FIELDSIZE][FIELDSIZE];
    //        for (String[] strings : this.battleBoard) {
    //            Arrays.fill(strings, "~");
    //        }
        }

        public void printBoard() {
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < 10; i++) {
                System.out.print(Character.valueOf(LETTERS.charAt(i)).toString() + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(field[i][j].getShip() != null ? "O ": "~ ");
                }
                System.out.println();
            }
        }

        public void printBoardFog() {
            String state;
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < 10; i++) {
                System.out.print(Character.valueOf(LETTERS.charAt(i)).toString() + " ");
                for (int j = 0; j < 10; j++) {
                    if (field[i][j].isHitOrMiss() && field[i][j].getShip() == null) {
                        state = "M ";
                    } else if (field[i][j].isHitOrMiss() && field[i][j].getShip() != null) {
                        state = "X ";
                    } else {
                        state = "~ ";
                    }
                    System.out.print(state);
                }
                System.out.println();
            }
        }

    //    public boolean getCoordinates(String input) {
    //        final String matcher = "[A-J][0-9]0?";
    //
    //        if (!input.matches(matcher)) {
    //            System.out.println("Error! You entered the wrong coordinates! Try again:");
    //            return false;
    //        }
    //
    //        int y = LETTERS.indexOf(input.charAt(0));
    //        int x = Integer.parseInt(input.substring(1)) - 1;
    //
    //        if (battleBoard[y][x].equals("O")) {
    //            System.out.println("You hit a ship!");
    //            battleBoard[y][x] = "X";
    //        } else {
    //            System.out.println("You missed!");
    //            battleBoard[y][x] = "M";
    //        }
    //        printBoard();
    //        return true;
    //    }
        public boolean getCoordinates(String input) {
            final String matcher = "[A-J][0-9]0?";

            if (!input.matches(matcher)) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                return false;
            }

            int y = LETTERS.indexOf(input.charAt(0));
            int x = Integer.parseInt(input.substring(1)) - 1;

            if (field[y][x].getShip() != null && field[y][x].getShip().getLives() > 1) {
                System.out.println("You hit a ship!");
                field[y][x].getShip().hit();
                field[y][x].setHitOrMiss(true);
            } else if (field[y][x].getShip() != null && field[y][x].getShip().getLives() == 1 && numberOfShips > 1) {
                System.out.println("You sank a ship! Specify a new target:");
                field[y][x].getShip().hit();
                field[y][x].setHitOrMiss(true);
                numberOfShips--;
            } else if (field[y][x].getShip() != null && field[y][x].getShip().getLives() == 1 && numberOfShips == 1) {
                System.out.println("You sank the last ship. You won. Congratulations!");
                field[y][x].getShip().hit();
                field[y][x].setHitOrMiss(true);
                numberOfShips--;
                //printBoardFog();
                return true;
            } else {
                System.out.println("You missed!");
                field[y][x].setHitOrMiss(true);
            }
            //printBoardFog();
            return false;
        }

            public boolean putShip(String input, ShipType shipType) {
            final String matcher = "[A-J][0-9]0?(\\s*)?[A-J][0-9]0?";
            String[] strings;

            if (!input.matches(matcher)) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                return false;
            }

            strings = input.split("\\s+");

            int x1 = Integer.parseInt(strings[0].substring(1)) - 1;
            int x2 = Integer.parseInt(strings[1].substring(1)) - 1;
            int y1 = LETTERS.indexOf(strings[0].charAt(0));
            int y2 = LETTERS.indexOf(strings[1].charAt(0));

            if (checkCoordinates(y1, x1, y2, x2, shipType)) {
                placeShips(y1, x1, y2, x2, shipType);
                printBoard();
                return true;
            }
            return false;
        }

        private boolean checkCoordinates(int y1, int x1, int y2, int x2, ShipType shipType) {
            if (checkDiagonals(y1, x1, y2, x2)) {
                int size = x1 == x2 ? Math.abs(y2 - y1) + 1 : Math.abs(x2 - x1) + 1;
                if (checkShipLength(size, shipType)) {
                    return checkValidShip(y1, x1, y2, x2);
                }
            }
            return false;
        }

        private boolean checkDiagonals(int y1, int x1, int y2, int x2) {
            if (y1 != y2 && x1 != x2) {
                System.out.println("Error! Wrong ship location! Try again:");
                return false;
            }
            return true;
        }

        private boolean checkShipLength(int size, ShipType shipType) {
            if (size != shipType.getSize()) {
                System.out.println("Error! Wrong length of the " + shipType.getName() + "! Try again:");
                return false;
            }
            return true;
        }

        private boolean checkValidShip(int y1, int x1, int y2, int x2) {
            final int  MIN_X = 0, MIN_Y = 0, MAX_X = FIELDSIZE - 1, MAX_Y = FIELDSIZE - 1;
            final int size = y1 == y2 ? Math.abs(x2 - x1) : Math.abs(y2 - y1);

            for (int i = 0; i <= size; i++) {
                int thisPosX = y1 == y2 ? i + Math.min(x2, x1) : Math.min(x2, x1);
                int thisPosY = x1 == x2 ? i + Math.min(y2, y1) : Math.min(y2, y1);
                int startPosX = (thisPosX - 1 < MIN_X) ? thisPosX : thisPosX-1;
                int startPosY = (thisPosY - 1 < MIN_Y) ? thisPosY : thisPosY-1;
                int endPosX =   (thisPosX + 1 > MAX_X) ? thisPosX : thisPosX+1;
                int endPosY =   (thisPosY + 1 > MAX_Y) ? thisPosY : thisPosY+1;

                for (int rowNum=startPosY; rowNum<=endPosY; rowNum++) {
                    for (int colNum=startPosX; colNum<=endPosX; colNum++) {

                        if (field[rowNum][colNum].getShip() != null) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        private void placeShips(int y1, int x1, int y2, int x2, ShipType shipType) {
            Ship tempShip = new Ship(shipType);
            for (int i = 0; i < shipType.getSize(); i++) {
                if (y1 == y2) {
                    field[y1][i + Math.min(x1,x2)].setShip(tempShip);
                } else if (x1 == x2) {
                    field[Math.min(y1,y2) + i][x1].setShip(tempShip);
                }
            }
            numberOfShips++;
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
    //    private final GameField gameField;
        private Player[] players;
        private final int numberOfPlayers = 2;
        private final Scanner scanner = new Scanner(System.in);

    //    public Game() {
    //        //this.gameField = new GameField();
    //        this.player = new Player();
    //        this.scanner = new Scanner(System.in);
    //    }

        public void play() {
            initializePlayers();
            setBoard();
    //        printBoardsP1();
    //
    //        System.out.println("\nThe game starts!\n");
            startBattle();
            scanner.close();
        }

        private void initializePlayers() {
            players = new Player[numberOfPlayers];
            for (int i = 0; i < numberOfPlayers; i++) {
                players[i] = new Player("Player " + (i + 1));
            }
        }
        private void setBoard() {
            for (Player player : players) {
                System.out.println(player.getName() + ", place your ships on the game field\n");
                player.getField().printBoard();
                System.out.println();

                for (ShipType shipType : ShipType.values()) {
                    System.out.println("Enter the coordinates of the " + shipType.getName() + " (" + shipType.getSize() + " cells):");
                    setShip(shipType, player);
                }
                System.out.println("\nPress Enter and pass the move to another player\n");
                scanner.nextLine();
            }
        }

        private void startBattle(){
            int player = 1;
            while (true) {
                if (player % 2 != 0) {
                    printBoardsP1();
                    String input = scanner.nextLine();
                    if (players[0].takeShot(players[1],input)) {
                        break;
                    } else {
                        System.out.println("\nPress Enter and pass the move to another player\n");
                        scanner.nextLine();
                    }
                } else {
                    printBoardsP2();
                    String input = scanner.nextLine();
                    if (players[1].takeShot(players[0], input)) {
                        break;
                    } else {
                        System.out.println("\nPress Enter and pass the move to another player\n");
                        scanner.nextLine();
                    }
                }
                player++;
            }
        }

        private void setShip(ShipType shipType, Player player){
            boolean placed = false;
            while (!placed){
                String input = scanner.nextLine();
                placed = player.getField().putShip(input, shipType);
            }
        }

        private void printBoardsP1() {
            players[1].getField().printBoardFog();
            System.out.println("---------------------");
            players[0].getField().printBoard();
            System.out.println("\n" + players[0].getName() + ", it's your turn:");
        }

        private void printBoardsP2() {
            players[0].getField().printBoardFog();
            System.out.println("---------------------");
            players[1].getField().printBoard();
            System.out.println("\n" + players[1].getName() + ", it's your turn:");
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        final private int size;
        final private String name;
        private int lives;
        boolean isSunk = false;

        public Ship(ShipType shipType) {
            this.size = shipType.getSize();
            this.name = shipType.getName();
            this.lives = shipType.getSize();
        }

        public int getLives() {
            return lives;
        }

        public void hit() {
            if (lives > 1) {
                lives--;
            } else if (lives == 1) {
                lives--;
                isSunk = true;
            }
        }
    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: |
    package battleship;

    public class Player {
        private GameField field;
        private final String name;

        public Player(String name) {
            this.field = new GameField();
            this.name = name;
        }

        public GameField getField() {
            return field;
        }

        public String getName() {
            return name;
        }

        public boolean takeShot(Player opponent, String coordinates) {
            return opponent.getField().getCoordinates(coordinates);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Unchecked
record: -1
